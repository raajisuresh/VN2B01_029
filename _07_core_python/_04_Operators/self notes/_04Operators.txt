Python Operators------


=>Operators are used to perform operations on variables and values.

=>In the example below, we use the + operator to add together two values:

Example--
	print(10 + 5)

=>Python divides the operators in the following groups:
	1) Arithmetic operators
	2) Assignment operators
	3) Comparison operators
	4) Logical operators
	5) Identity operators
	6) Membership operators
	7) Bitwise operators

1) Arithmetic Operators--

=>Arithmetic operators are used with numeric values to perform common mathematical operations:

	Operator		Name		Example
	+		Addition		x + y	
	-		Subtraction	x - y	
	*		Multiplication	x * y	
	/		Division		x / y	
	%		Modulus		x % y	
	**		Exponentiation	x ** y	
	//		Floor division	x // y	

2) Assignment Operators--

=>Assignment operators are used to assign values to variables:

	Operator		Description					Example
	    =		Assign value of right side of expression
		 	to left side operand					x = 5	

	   +=		Add and Assign: Add right side operand with 	
			left side operand and then assign to left operand		x = x + 3	

	   -=		Subtract AND: Subtract right operand from	
			left operand and then assign to left operand		x = x - 3	

	  *=		Multiply AND: Multiply right operand with
			left operand and then assign to left operand		x = x * 3
	
	  /=		Divide AND: Divide left operand with 
			right operand and then assign to left operand		x = x / 3	

	  %=		Modulus AND: Takes modulus using left and
			right operands and assign result to left operand		x = x % 3	

	   //=		Divide(floor) AND: Divide left operand with 
			right operand and then assign the value(floor) to 		x = x // 3	
			left operand

	  **=		Exponent AND: Calculate exponent(raise power) 
			value using operands and assign				x = x ** 3	
	  
	  &=		Performs Bitwise AND on operands and 
			assign value to left operand				x = x & 3	

	   |=		Performs Bitwise OR on operands and
			assign value to left operand			               	x = x | 3	

	  ^=		Performs Bitwise xOR on operands and 
			assign value to left operand				x = x ^ 3	

	  >>=		Performs Bitwise right shift on operands and
			assign value to left operand				x = x >> 3
	
	  <<=		Performs Bitwise left shift on operands and 
			assign value to left operand				x = x << 3


3) Comparison Operators--

=>Comparison operators are used to compare two values and gives boolean value as an output.

	Operator	Name			Example	
	==	Equal			x == y	
	!=	Not equal			x != y	
	>	Greater than		x > y	
	<	Less than			x < y	
	>=	Greater than or equal to	x >= y	
	<=	Less than or equal to		x <= y

4) Logical Operators---

=>Logical operators are used to combine conditional statements and the boolean value is the output.

	Operator	Description					Example
	and 	Returns True if both statements are true			x < 5 and  x < 10	
	or	Returns True if one of the statements is true		x < 5 or x < 4	
	not	Reverse the result, returns False if the result is true		not(x < 5 and x < 10)	

5) Identity Operators---

=>Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:

	Operator	Description					Example	
	is 	Returns True if both variables are the same object		x is y	
	is not	Returns True if both variables are not the same object		x is not y	


6) Membership Operators---

=>Membership operators are used to test if a sequence is presented in an object:

	Operator	Description							Example
	in 	Returns True if a sequence with the specified value is present in the object		x in y	
	not in	Returns True if a sequence with the specified value is not present in the object	x not in y

7) Bitwise Operators---

=>Bitwise operators are used to compare (binary) numbers:

	Operator	Name		Description
	& 	AND		Sets each bit to 1 if both bits are 1
	|	OR		Sets each bit to 1 if one of two bits is 1
	^	XOR		Sets each bit to 1 if only one of two bits is 1
	~ 	NOT		Inverts all the bits
	<<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
	>>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off


